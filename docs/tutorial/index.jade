.chapter(data-title='2FA Tutorial')
  .step(data-title='Welcome!', data-file='tutorial/config.json')
    :markdown
      ### Two-Factor Authentication
      This tutorial shows how to use RingCentral SMS API to send a verification code for 2-factor authentication to help prevent brute force attacks and protect user's accounts.

      ** Use case 1: Protect a user account from brute force attacks. **

      After 3 unsuccessful attempts were made to log into a user's account, the account will be temporarily locked. The service will generate a 6-digit verification code and send the code to the user's mobile phone number.

      The user has to use the verification code to unlock his/her account. The verification code can be used only one time and it also expires after 1 hour.

      If the verification code is incorrect, or if the verification code expired, the user has to request for a new verification code.

      ** Use case 2: Prevent taking over login control. **

      When a user wants to reset the login password. The service will generate a 6-digit verification code and send the code to the user's mobile phone number.

      The user has to use the verification code to set a new password for his/her account. The verification code can be used only one time and it also expires after 1 hour.

      If the verification code is incorrect, or if the verification code expired, the user has to request for a new verification code.

      ### Requirements
      You must have a RingCentral developer account. If you don't have one, click [here](https://developer.ringcentral.com) to create a free developer account.

      You also have to [create a RingCentral app](https://developer.ringcentral.com/library/getting-started.html) with the "SMS" permissions. And retrieve the Client id and secret for using with this tutorial.

  .step(data-title='Project setup', data-file='../README.md', data-highlight='31-39')
    :markdown
      ### Clone the project
      Clone the project from GitHub and install RingCentral SDK and dependencies.

  .step(data-title='Set environment', data-file='../dotenv')
    :markdown
      ### Set environment parameters
      ```
      $ cp dotenv .env
      ```
      Add your app client id and client secret as well as account login credentials to the .env file.
      * __Note__: The username is the account number and it is also the phone number we will use to send SMS from. If you want to use another number under this account, you can create a new variable and specify the phone number and use that number for sending SMS instead.

      ### Run the demo
      ```
      $ FLASK_APP=index.py flask run
      ```
      Open your Web browser and enter localhost:5000

  .step(data-title='Web pages and client JavaScript', data-file='../templates/about.html', data-highlight='1-75')
    :markdown
      ### Web pages
      In this tutorial, we'll implement 3 pages:

      __signup.html__: this page contains a form for users to sign up.

      __index.html__: this page contains forms for users to login and reset password.

      __about.html__: this page contains information about this tutorial.

      ### Client-side JavaScript files
      Client-side JavaScript files are located under the __static/js__ folder.

      We'll implement all functions in the _main.js_ file.

  .step(data-title='Add a signup page', data-file='../templates/signup.html', data-highlight='29-46')
    :markdown
      ### Add a signup page
      We need a signup page for users to create a user account.

      In this page, we implement a form where a user provides email address, password, mobile phone number, first name and last name to create a new user account.

      When the _Submit_ button in the form is clicked, we will use JQuery post function to send a request to the server instead of using the default submit function.

  .step(data-title='Add a login page', data-file='../templates/index.html', data-highlight='29-75')
    :markdown
      ### Add a login page
      We also need a login page for users to login.

      We create 3 UI blocks to show the login form, reset password form and code verification form in the same page. Then we will use JQuery code to display the forms based on the stage of the login progress.

      When a button in a form is clicked, we will use JQuery post function to send a request to the server instead of using the default submit function.

  .step(data-title='Implement  JavaScript client-side', data-file='../static/js/main.js', data-highlight='1-178')
    :markdown
      ### Implement JavaScript client-side
      Now, let's create the _main.js_ file and save it to the __static/js/__ folder.

      In this file, we will implement all client-side functions to send HTTP requests to our server.

  .step(data-title='Implement signup client-side', data-file='../static/js/main.js', data-highlight='61-96')
    :markdown
      ### Implement signup client-side
      We implement the __signup()__ function which will be called when a user clicks the Submit button on the signup page.

      Inside the client-side __signup__ function, we will check the mandatory user's inputs and encrypt the password before posting the _signup_ request to the our server.

      If the server response with no error, we then launch the main page, which will show the login form. If it is an error, we will pop up an alert dialog with the error message.

  .step(data-title='Implement signup server-side', data-file='../engine.py', data-highlight='248-270')
    :markdown
      ### Implement signup server-side
      In the __engine.py__ file, we implement the __signup__ function which will be called when a _signup_ request is made from the client-side.

      Inside the server-side __signup__ function, we will create a new user and insert the user information to the _users.db_ database.

      For each user account, we create an entry in the database with the following user data:

      * __id__: a unique user ID
      * __phoneno__: user's mobile phone number
      * __email__: user's email address
      * __pwd__: encrypted password
      * __fname__: user's first name
      * __lname__: user's last name
      * __failure__: number of failed login attempts
      * __locked__: account locked/unlocked status
      * __code__: latest sent verification code
      * __codeexpiry__: verification code expiry time

  .step(data-title='Implement login client-side', data-file='../static/js/main.js', data-highlight='12-59')
    :markdown
      ### Implement login client-side
      First, we implement the __getSeed__ function which will be called when a user clicks the Submit button on the login form.

      Inside the client-side __getSeed__ function, we will send a _getseed_ request to our server to get a seed value, which will be used to encrypt the user's password.

      Then we implement the __login__ function which will be called programmatically when we get the seed from our server.

      Inside the client-side __login__ function, we will post a _login_ request with the user's email address, the encrypted password and the id of the seed to the server.

  .step(data-title='Implement login server-side - step 1', data-file='../engine.py', data-highlight='24-43')
    :markdown
      ### Implement login server-side - step 1
      In the __engine.py__ file, we implement the __getSeed__ function which will be called when a _getseed_ request is made from the client-side.

      Inside the server-side __getSeed__ function, we will generate a seed value and add it to the seeds table in our users database. We then send a response back to the client with the seed id and seed value.

  .step(data-title='Implement login server-side - step 2', data-file='../engine.py', data-highlight='47-58')
    :markdown
      ### Implement login server-side - step 2
      Then we implement the server-side __login__ function which will be called when a _login_ request is made from the client-side.

      Inside the server-side __login__ function, we will read the seed value from the seeds table identified by the seed id we just got back from the client.

      Then we read the user's data (phoneno, pwd, failure, locked, code) from the users database identified by the user's email address.

  .step(data-title='Implement login server-side - step 3', data-file='../engine.py', data-highlight='66-103')
    :markdown
      ### Implement login server-side - step 3
      If the user's data is read successfully, we will check if the account is locked or not.

      If the account is locked, we will generate a verification code and send it to the user's mobile phone number. We will look into the _sendSMSMessage_ function later. To response to the user's request in this case, we create a message to notify that the account is temporarily locked and a verification code is sent to the user's mobile phone number. However, we should reveal just the last 4-digit phone number e.g. X-XXX-XXX-1234

      If the account is not locked, we will encrypt the account password with the seed value then compare it with the user's login password taken from the post request _inPassword_.

      Now, if the passwords match, we will proceed the login with an "OK" response.

      If the passwords do not match, we will increase the failure count and check if the failure count reaches the MAX_FAILURE (in this demo, this max is set to 3 times) before updating the user database with the new values. Then we send the failure response to the client.

  .step(data-title='Implement the sendSMSMessage function', data-file='../engine.py', data-highlight='72-73')
    :markdown
      ### Implement sendSMSMessage function
      When we call the _sendSMSMessage_ function, we pass the following parameters to the function:
      * - __conn__: the SQLite database connection handler,
      * - __phoneno__: the user's mobile phone number, to which we can send a text message,
      * - __email__: the user's email address which we can use to update the user's data in the database,
      * - __message__: the message we want to respond to the user who tries to login or to reset password.

  .step(data-title='Instantiate the RingCentral Python SDK', data-file='../engine.py', data-highlight='273-281')
    :markdown
      ### Instantiate the RingCentral Python SDK
      First, we create the SDK instance `rcsdk` and initialize it with the Client id and secret.

      Then we call the `rcsdk.platform()` function to get the instance of the platform component. The `platform` instance will be used later to login and call RingCentral APIs.

  .step(data-title='Login to RingCentral account', data-file='../engine.py', data-highlight='283-283')
    :markdown
      ### Login to RingCentral account
      To login RingCentral account, we call the `platform.login()` function with the account's username and password predefined in the __credentials.php_ file.

  .step(data-title='Send verification code', data-file='../engine.py', data-highlight='284-290')
    :markdown
      ### Generate a verification code
      After we logged in RingCentral account successfully, we generate a random 6-digit verification code.

      ```
      function generateRandomCode($length) {
        $min = 10;
        for ($i=1; $i<$length-1; $i++) {
            $min *= 10;
        }
        $max = ($min * 10) - 1;
        return mt_rand($min, $max);
      }
      ```

      ### Send a SMS message
      We use the `platform.post()` function to call the SMS API with the specified parameters:

      The `from` number is our RingCentral phone number specified in the environment file.

      The `to` number is the user's mobile phone number we read from the user's database.

      The `text` contains the verification code we generated above.

  .step(data-title='Save the verification code', data-file='../engine.py', data-highlight='292-299')
    :markdown
      ### Save the verification code
      After we sent the verification code successfully, we generate a timestamp and save the verification code and the timestamp to the user database.

      Finally, we send a response back to the client to notify the user that the user account is locked and a verification code was sent to the user's mobile phone number.

  .step(data-title='Unlock a user account - client-side', data-file='../static/js/main.js', data-highlight='98-119')
    :markdown
      ### Unlock a user account - client-side
      When a user's account is locked, we ask the user to provide a verification code to unlock the account before the user can retry to login.

      We implement the __verifyPasscode__ function which will be called when a user clicks the Submit button from the verification form.

      Inside the client-side __verifyPasscode__ function, we will post a _verifypasscode_ request with the user's email address and the verification code to the server.

      If we receive an "OK" response from the server, which means the verification code matched with the code we saved in the user database, then we will allow the user to try login again.

  .step(data-title='Unlock a user account - server-side', data-file='../engine.py', data-highlight='162-208')
    :markdown
      ### Unlock a user account - server-side
      In the __engine.py__ file, we implement the __verifyPasscode__ function which will be called when a _verifypasscode_ request is posted from the client side.

      Inside the server-side __verifyPasscode__ function, we will read the user's data (locked, code, codeexpiry) identified by the user's email address.

      If the user's data is read successfully, we will check if the account is locked or not.

      If the account is not locked, we just send a response asking the user to login normally.

      ### Validate the verification code
      If the account is locked, we will generate a new timestamp and compare it with the _codeexpiry_ to check if the verification is still valid.

      If the verification code is still valid, we validate the user's provided code and compare it with the one we read from the database.

      If the codes match, we unlock the user's account by updating the user's data (failure=0, locked=0, code=0) and send a response to allow the user to retry login.

      If the codes do not match, we reset the verification code (code=0, codeexpiry=0) and send a response to the user indicating the verification code is invalid. In this demo, the user has to send a new request for a new verification code manually.

  .step(data-title='Reset password - client-side', data-file='../static/js/main.js', data-highlight='147-180')
    :markdown
      ### Reset password - client-side
      Requiring a verification code when a user attempts to change the login password would prevent the account from being taken over by hackers if the account login credentials were compromised.

      We implement the __resetPwd__ function which will be called when a user clicks the Submit button from the Reset password form.

      Inside the client __resetPwd__ function, we will post a _resetpwd_ request with the user's email address to the server.

      We provide two steps to reset a password. The first step is to ask for the user's email address and send it to the server to get a verification code. The second step is when we receive the "OK" response from the server, we will enable the entire form with the new password field and the verification code field.

  .step(data-title='Reset password - server-side', data-file='../engine.py', data-highlight='109-116')
    :markdown
      ### Reset password - server-side
      In the __engine.py__ file, we implement the __resetPwd__ function which will be called when a _resetpwd_ request is posted from the client side.

      Inside the server __resetPwd__ function, we will read the user's data (phoneno, code, codeexpiry) identified by the user's email address.

      If the user's data is read successfully, we will check if the request is to get a verification code by checking if the _code_ and _pwd_ exist in the request.

  .step(data-title='Send a verification code', data-file='../engine.py', data-highlight='123-130')
    :markdown
      ### Send a verification code
      If the _code_ and _pwd_ do not exist, it is a request for a verification code. Then we call the __sendSMSMessage__ function to generate a verification code, send it to the user's mobile phone number and send a response to the client.

  .step(data-title='Implement reset password', data-file='../engine.py', data-highlight='132-158')
    :markdown
      ### Implement reset password
      If the _code_ and the _pwd_ exist, it is a request to set a new password. Then we we will generate a new timestamp and compare it with the _codeexpiry_ to check if the verification is still valid.

      If the verification code is still valid, we validate the user's provided code and compare it with the one we read from the database.

      If the codes match, we update the user's data with the new password, reset the code and the expiry time. And send a response to allow the user to login with a new password.

      If the codes do not match, we reset the verification code (code=0, codeexpiry=0) and send a response to the user to indicate that the verification code is invalid. In this demo, the user has to send a new request for a new verification code manually.

  .step(data-title='Resend a verification code', data-file='../engine.py', data-highlight='210-221')
    :markdown
      ### Resend a verification code
      Every time a user requests for a new verification code, we read the user's mobile phone number from the user database then call the _sendSMSMessage_ function to generate a new verification code, send it to the user and update the user database with the code and code expiration time.
